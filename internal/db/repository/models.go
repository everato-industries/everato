// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BookingStatus string

const (
	BookingStatusPENDING        BookingStatus = "PENDING"
	BookingStatusPENDINGPAYMENT BookingStatus = "PENDING_PAYMENT"
	BookingStatusTIMEOUT        BookingStatus = "TIMEOUT"
	BookingStatusFILLED         BookingStatus = "FILLED"
	BookingStatusCONFIRMED      BookingStatus = "CONFIRMED"
	BookingStatusCANCELLED      BookingStatus = "CANCELLED"
)

func (e *BookingStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BookingStatus(s)
	case string:
		*e = BookingStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BookingStatus: %T", src)
	}
	return nil
}

type NullBookingStatus struct {
	BookingStatus BookingStatus
	Valid         bool // Valid is true if BookingStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBookingStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BookingStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BookingStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBookingStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BookingStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusDONE      PaymentStatus = "DONE"
	PaymentStatusCANCELLED PaymentStatus = "CANCELLED"
	PaymentStatusTIMEOUT   PaymentStatus = "TIMEOUT"
	PaymentStatusFAILED    PaymentStatus = "FAILED"
	PaymentStatusREJECTED  PaymentStatus = "REJECTED"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type PaymentType string

const (
	PaymentTypeUPISS   PaymentType = "UPI_SS"
	PaymentTypeGATEWAY PaymentType = "GATEWAY"
)

func (e *PaymentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentType(s)
	case string:
		*e = PaymentType(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentType: %T", src)
	}
	return nil
}

type NullPaymentType struct {
	PaymentType PaymentType
	Valid       bool // Valid is true if PaymentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentType) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentType), nil
}

type Permissions string

const (
	PermissionsMANAGEEVENTS   Permissions = "MANAGE_EVENTS"
	PermissionsCREATEEVENT    Permissions = "CREATE_EVENT"
	PermissionsEDITEVENT      Permissions = "EDIT_EVENT"
	PermissionsDELETEEVENT    Permissions = "DELETE_EVENT"
	PermissionsVIEWEVENT      Permissions = "VIEW_EVENT"
	PermissionsMANAGEBOOKINGS Permissions = "MANAGE_BOOKINGS"
	PermissionsCREATEBOOKING  Permissions = "CREATE_BOOKING"
	PermissionsEDITBOOKING    Permissions = "EDIT_BOOKING"
	PermissionsDELETEBOOKING  Permissions = "DELETE_BOOKING"
	PermissionsVIEWBOOKING    Permissions = "VIEW_BOOKING"
	PermissionsMANAGEUSERS    Permissions = "MANAGE_USERS"
	PermissionsVIEWREPORTS    Permissions = "VIEW_REPORTS"
)

func (e *Permissions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Permissions(s)
	case string:
		*e = Permissions(s)
	default:
		return fmt.Errorf("unsupported scan type for Permissions: %T", src)
	}
	return nil
}

type NullPermissions struct {
	Permissions Permissions
	Valid       bool // Valid is true if Permissions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPermissions) Scan(value interface{}) error {
	if value == nil {
		ns.Permissions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Permissions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPermissions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Permissions), nil
}

type SuperUserRole string

const (
	SuperUserRoleSUPERADMIN SuperUserRole = "SUPER_ADMIN"
	SuperUserRoleADMIN      SuperUserRole = "ADMIN"
	SuperUserRoleEDITOR     SuperUserRole = "EDITOR"
)

func (e *SuperUserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SuperUserRole(s)
	case string:
		*e = SuperUserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for SuperUserRole: %T", src)
	}
	return nil
}

type NullSuperUserRole struct {
	SuperUserRole SuperUserRole
	Valid         bool // Valid is true if SuperUserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSuperUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.SuperUserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SuperUserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSuperUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SuperUserRole), nil
}

type TicketStatus string

const (
	TicketStatusBOOKED    TicketStatus = "BOOKED"
	TicketStatusCANCELLED TicketStatus = "CANCELLED"
	TicketStatusTIMEOUT   TicketStatus = "TIMEOUT"
	TicketStatusFAILED    TicketStatus = "FAILED"
)

func (e *TicketStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TicketStatus(s)
	case string:
		*e = TicketStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TicketStatus: %T", src)
	}
	return nil
}

type NullTicketStatus struct {
	TicketStatus TicketStatus
	Valid        bool // Valid is true if TicketStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTicketStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TicketStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TicketStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTicketStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TicketStatus), nil
}

type Booking struct {
	ID        pgtype.UUID
	EventID   pgtype.UUID
	UserID    pgtype.UUID
	CouponID  pgtype.UUID
	Status    BookingStatus
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Coupon struct {
	ID                 pgtype.UUID
	EventID            pgtype.UUID
	Code               string
	DiscountPercentage float64
	ValidFrom          pgtype.Timestamptz
	ValidUntil         pgtype.Timestamptz
	UsageLimit         int32
	CreatedAt          pgtype.Timestamptz
	UpdatedAt          pgtype.Timestamptz
}

type Event struct {
	ID             pgtype.UUID
	Title          string
	Description    string
	Banner         string
	Icon           string
	AdminID        pgtype.UUID
	StartTime      pgtype.Timestamptz
	EndTime        pgtype.Timestamptz
	Location       pgtype.Text
	TotalSeats     int32
	AvailableSeats int32
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
	Slug           string
}

type Payment struct {
	ID       pgtype.UUID
	Amount   float64
	Type     PaymentType
	Status   PaymentStatus
	EventID  pgtype.UUID
	UserID   pgtype.UUID
	TicketID pgtype.UUID
}

type SuperUser struct {
	ID          pgtype.UUID
	Email       string
	Password    string
	Role        SuperUserRole
	Permissions []Permissions
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	Username    string
	Name        string
}

type Ticket struct {
	ID         pgtype.UUID
	Price      float64
	Status     TicketStatus
	EventID    pgtype.UUID
	UserID     pgtype.UUID
	TicketType pgtype.UUID
	BookingID  pgtype.UUID
	QrCode     pgtype.Text
}

type TicketType struct {
	ID               pgtype.UUID
	Name             string
	EventID          pgtype.UUID
	Price            float64
	AvailableTickets int32
}

type User struct {
	ID        pgtype.UUID
	FirstName string
	LastName  string
	Email     string
	Password  string
	Verified  bool
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}
